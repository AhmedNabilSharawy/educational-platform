{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"KnowledgeCity Platform Architecture","text":"<p>Welcome to the documentation for the KnowledgeCity multi-regional, scalable, and highly available cloud-native platform architecture.</p> <p></p>"},{"location":"#contents","title":"Contents","text":"<ul> <li>High-Level Architecture</li> <li>Frontend Design</li> <li>PHP Monolith Application</li> <li>Analytics Microservice (ClickHouse)</li> <li>Video Processing and Delivery</li> <li>Data Distribution &amp; Multi-Regional Setup</li> <li>Scalability and Optimization</li> <li>Security and Compliance</li> <li>Observability &amp; Monitoring</li> <li>Extensibility &amp; Future Microservices</li> </ul> <p>For a visual walkthrough of the architecture, refer to the Architecture Overview.</p>"},{"location":"analytics/","title":"Analytics Microservice","text":"<p>The Analytics Microservice is responsible for: - Collecting and receiving user interaction data (e.g., video plays, quiz attempts, clicks, etc.). - Storing this data in ClickHouse for fast analytics processing. - Querying ClickHouse to generate analytics reports, dashboards, or insights.</p>"},{"location":"analytics/#architecture","title":"Architecture","text":"<ul> <li>ClickHouse is used as the core analytics database due to its columnar storage and high-speed OLAP capabilities.</li> <li>Microservice is containerized and deployed in Amazon EKS.</li> </ul>"},{"location":"analytics/#deployment","title":"Deployment","text":"<ul> <li>One instance per region to keep data local (Saudi / U.S.).</li> <li>Each instance writes to its own regional ClickHouse cluster.</li> </ul>"},{"location":"analytics/#security-and-retention","title":"Security and Retention","text":"<ul> <li>Encryption at rest and in transit (KMS-managed).</li> <li>Role-based access control to metrics dashboards.</li> <li>Data retention policies enforced per region for compliance.</li> </ul> <p>\u2b05 Back to Home</p>"},{"location":"architecture/","title":"High-Level Architecture","text":"<p>The KnowledgeCity platform is designed to be a cloud-native, multi-regional, and highly available system capable of serving users from different parts of the world with low latency and strong regional compliance.</p> <p></p>"},{"location":"architecture/#core-principles","title":"Core Principles","text":"<ul> <li>Multi-Regional Deployment: U.S. and Saudi Arabia are used as primary regions.</li> <li>High Availability: Each region spans multiple availability zones to ensure 99.99% uptime.</li> <li>Separation of Concerns: Frontend, monolith, microservices, and data pipelines are clearly separated.</li> <li>Data Residency: User data is stored in the region of origin (Saudi for Saudi users, U.S. for U.S. users).</li> </ul>"},{"location":"architecture/#architecture-components","title":"Architecture Components","text":"<ul> <li>Frontend: Deployed via Amazon S3 and served globally using Amazon CloudFront.</li> <li>Backend (Monolith): A PHP application hosted in Amazon EKS, handling core logic.</li> <li>Microservices: Analytics, video conversion, and other domain-specific services in EKS.</li> <li>Storage: Amazon S3 with cross-region replication and intelligent tiering.</li> <li>Databases: ClickHouse for analytics, RDS for structured app data.</li> <li>Event Bus: Amazon EventBridge used for decoupled, event-driven architecture.</li> <li>Global CDN: Ensures fast delivery of video and frontend assets.</li> </ul>"},{"location":"architecture/#reliability-and-redundancy","title":"Reliability and Redundancy","text":"<ul> <li>Multi-AZ within each region.</li> <li>Cross-region S3 replication for educational content.</li> <li>Stateless services running behind load balancers.</li> </ul> <p>\u2b05 Back to Home</p>"},{"location":"ci-cd/","title":"CI/CD Strategy","text":"<p>The CI/CD pipelines are designed to support automated, secure, and scalable deployments across multiple services, environments, and regions.</p>"},{"location":"ci-cd/#pipeline-overview","title":"Pipeline Overview","text":"<p>Each application component (monolith, microservices, frontend) has its own pipeline with the following key stages:</p> <ul> <li>Build:</li> <li>Linting and code quality checks (e.g., PHPStan, ESLint).</li> <li>Unit and integration tests.</li> <li>Container image build and scan (e.g., Trivy).</li> <li>Test:</li> <li>Test in isolated namespaces using ephemeral environments.</li> <li>Security scans and code analysis (e.g., SonarQube).</li> <li>Deploy:</li> <li>Canary deployments and rollout strategies.</li> <li>Environment-specific Helm values or Kustomize overlays.</li> <li>Deployment to regional EKS clusters.</li> </ul>"},{"location":"ci-cd/#tools-used","title":"Tools Used","text":"<ul> <li>Source Control: GitHub.</li> <li>CI/CD Engine: GitHub Actions.</li> <li>Container Registry: Amazon ECR.</li> <li>Infrastructure as Code: Terraform and Helm.</li> <li>Secrets Management: AWS Secrets Manager.</li> <li>Security: Trivy for vulnerability scanning.</li> </ul>"},{"location":"ci-cd/#deployment-targets","title":"Deployment Targets","text":"<ul> <li>Staging: Full stack deployed for UAT and integration testing.</li> <li>Production:</li> <li>Deployed to U.S. and Saudi regions.</li> <li>Blue-green or canary rollout per region.</li> </ul>"},{"location":"ci-cd/#best-practices","title":"Best Practices","text":"<ul> <li>Immutable deployments via containerization.</li> <li>Rollbacks enabled via Helm revision history.</li> <li>Artifact versioning using Git commit hashes.</li> <li>Notifications via Slack or email on pipeline events.</li> </ul> <p>\u2b05 Back to Home</p>"},{"location":"compliance/","title":"Compliance and Regulatory Strategy","text":"<p>To meet regional legal requirements and enterprise-grade data protection, the architecture is built with compliance in mind.</p>"},{"location":"compliance/#data-residency","title":"Data Residency","text":"<ul> <li>Saudi Arabia: Saudi user data is stored and processed exclusively within AWS Middle East region.</li> <li>United States: U.S. user data is isolated within AWS US-East or US-West regions.</li> <li>Storage Isolation: Separate databases, S3 buckets, and logs per region to enforce data boundaries.</li> </ul>"},{"location":"compliance/#data-protection","title":"Data Protection","text":"<ul> <li>At Rest: All storage encrypted using AWS KMS-managed Keys.</li> <li>In Transit: Enforced TLS 1.2+ across services and APIs.</li> <li>Backup &amp; Retention: Automated daily backups with regionally enforced retention periods.</li> </ul>"},{"location":"compliance/#access-and-auditing","title":"Access and Auditing","text":"<ul> <li>RBAC: Granular IAM roles per team/function.</li> <li>Audit Logs: CloudTrail, EKS audit logs, and RDS logs are shipped to secure, immutable S3 buckets.</li> <li>Anomaly Detection: GuardDuty and CloudWatch Alarms notify on suspicious activity.</li> </ul>"},{"location":"compliance/#adaptability-to-future-regulations","title":"Adaptability to Future Regulations","text":"<ul> <li>Policies and infrastructure managed as code.</li> <li>Data localization can be extended to additional regions with minimal effort.</li> <li>Encryption, logging, and alerting can be adapted to meet new compliance requirements.</li> </ul> <p>\u2b05 Back to Home</p>"},{"location":"data-distribution/","title":"Data Distribution &amp; Multi-Regional Deployment","text":"<p>This section explains how KnowledgeCity ensures regional data compliance, low-latency delivery, and high availability through a carefully designed multi-regional architecture.</p>"},{"location":"data-distribution/#regional-data-residency","title":"\ud83c\udf0d Regional Data Residency","text":"<ul> <li>Saudi Arabian users: Their personal data is stored and processed exclusively in the Saudi Arabia (me-central-1) region.</li> <li>U.S. users: Their data resides in the U.S. (us-east-1) region.</li> <li>Educational content is replicated to both regions to serve users globally.</li> </ul>"},{"location":"data-distribution/#multi-region-architecture","title":"\ud83c\udfe2 Multi-Region Architecture","text":"<p>Each region operates independently but in coordination with:</p> <ul> <li>Separate RDS and ClickHouse clusters per region.</li> <li>Independent EKS clusters with the full application stack.</li> <li>Shared S3 storage with Cross-Region Replication for static assets and courses.</li> </ul>"},{"location":"data-distribution/#global-delivery-strategy","title":"\ud83d\udef0\ufe0f Global Delivery Strategy","text":"<ul> <li>Route53 uses Geo DNS or Latency-based Routing to direct traffic to the user\u2019s nearest region.</li> <li>CloudFront CDN accelerates delivery by caching content at global edge locations.</li> </ul>"},{"location":"data-distribution/#high-availability-9999-sla","title":"\ud83d\udd01 High Availability (99.99% SLA)","text":"<ul> <li>Every region uses Multi-AZ deployment for:</li> <li>EKS worker nodes.</li> <li>RDS instances.</li> <li>Traffic can shift between AZs automatically in case of failure.</li> </ul>"},{"location":"data-distribution/#flexibility-and-scalability","title":"\ud83e\udde9 Flexibility and Scalability","text":"<ul> <li>Easily add new regions by:</li> <li>Deploying duplicate infrastructure via IaC (Terraform).</li> <li>Using CI/CD to bootstrap services.</li> <li>Configuring S3 replication and Route53 rules.</li> </ul> <p>\u2b05 Back to Home</p>"},{"location":"frontend/","title":"Front-End","text":"<p>The front-end of the KnowledgeCity platform is a Single Page Application (SPA) built with React or Svelte. It serves as the primary user interface for accessing educational content, managing accounts, and interacting with platform features.</p>"},{"location":"frontend/#key-characteristics","title":"Key Characteristics","text":"<ul> <li>SPA Architecture: Ensures seamless user experience without full page reloads.</li> <li>Deployed to Amazon S3: The static files are hosted in S3 buckets located in both the U.S. and Saudi Arabia regions.</li> <li>Global Delivery via CloudFront: Amazon CloudFront CDN is used to deliver frontend assets with low latency to users across the globe.</li> <li>DNS Routing with Route53: Region-based DNS resolution routes users to the closest deployment for minimal latency.</li> </ul>"},{"location":"frontend/#multi-regional-access","title":"Multi-Regional Access","text":"<p>Users from different regions (e.g., Saudi Arabia and the U.S.) are automatically directed to the closest frontend via Route53 geo-based routing and served assets cached at edge locations via CloudFront.</p>"},{"location":"frontend/#high-availability","title":"High Availability","text":"<ul> <li>Static hosting on S3: resilient, fast, scalable and cost effective.</li> <li>CloudFront Caching: Ensures reduced load times and fault tolerance.</li> <li>Deployed in multiple regions: For redundancy and compliance.</li> </ul> <p>\u2b05 Back to Home</p>"},{"location":"future-expansion/","title":"Future Expansion and Extensibility","text":"<p>The KnowledgeCity architecture is built with future scalability and extensibility in mind. It supports seamless integration of new services, regions, and technologies without disrupting the existing system.</p>"},{"location":"future-expansion/#adding-new-microservices","title":"Adding New Microservices","text":"<ul> <li>CI/CD Pipelines: Each new microservice comes with its own build, test, and deploy pipeline.</li> </ul>"},{"location":"future-expansion/#adding-new-regions","title":"Adding New Regions","text":"<ul> <li>Region Templates: Terraform modules or Helm charts can replicate architecture in new regions.</li> <li>Data Residency: Services and storage comply with local data regulations.</li> <li>DNS Routing: Global routing via Route 53 latency-based or geolocation policies.</li> </ul>"},{"location":"future-expansion/#developer-enablement","title":"Developer Enablement","text":"<ul> <li>Documentation: Each component is documented with API specs, usage, and deployment guides.</li> </ul> <p>\u2b05 Back to Home</p>"},{"location":"monolith/","title":"Monolithic PHP Application","text":"<p>The core of the KnowledgeCity platform\u2019s business logic is handled by a monolithic PHP application.</p>"},{"location":"monolith/#deployment","title":"Deployment","text":"<ul> <li>Containerized in Docker: The application is packaged as a Docker image for consistency and portability.</li> <li>Deployed via Amazon EKS: Kubernetes manages the PHP application's lifecycle, scaling, and updates.</li> <li>Region-Based Clusters: Separate EKS clusters are deployed in the U.S. and Saudi Arabia to comply with data residency laws.</li> </ul>"},{"location":"monolith/#database","title":"Database","text":"<ul> <li>Amazon RDS (Aurora MySQL/PostgreSQL) is used for structured data storage.</li> <li>Each region maintains its own RDS instance for local data access.</li> <li>Read replicas are enabled for high availability and failover.</li> </ul>"},{"location":"monolith/#redundancy-scaling","title":"Redundancy &amp; Scaling","text":"<ul> <li>Horizontal Pod Autoscaling (HPA) is configured based on CPU/memory.</li> <li>Multi-AZ RDS deployment ensures high availability of database backend.</li> <li>Stateless PHP backend allows for easy replication across regions.</li> </ul>"},{"location":"monolith/#security","title":"Security","text":"<ul> <li>IAM Roles for Service Accounts (IRSA) are used for fine-grained permissions.</li> <li>Secrets Manager stores sensitive environment variables and DB credentials.</li> <li>TLS is enforced in both transit and at rest.</li> </ul> <p>\u2b05 Back to Home</p>"},{"location":"multi-region/","title":"Multi-Regional Data Strategy","text":"<p>This document describes how the platform handles regional data distribution, compliance, and availability.</p>"},{"location":"multi-region/#goals","title":"Goals","text":"<ul> <li>Ensure user data is stored and served only within its origin region.</li> <li>Achieve high availability across multiple zones.</li> <li>Enable global access to public content like courses while respecting data boundaries.</li> </ul>"},{"location":"multi-region/#regional-data-segmentation","title":"Regional Data Segmentation","text":"<ul> <li>Saudi Arabian Users</li> <li>All personal and usage data is stored in the Middle East (Saudi Arabia) region.</li> <li> <p>Data is served from this region exclusively.</p> </li> <li> <p>U.S. Users</p> </li> <li>Data for users in the U.S. is stored and served from the U.S. region.</li> <li> <p>Ensures compliance with U.S. data laws.</p> </li> <li> <p>Global Educational Content</p> </li> <li>Public videos and course material are replicated globally via S3 Cross-Region Replication.</li> <li>Delivered through Amazon CloudFront with edge caching.</li> </ul>"},{"location":"multi-region/#architecture-for-high-availability","title":"Architecture for High Availability","text":"<ul> <li>Multi-AZ deployment in each region.</li> <li>Stateless services and auto-scaling enabled via EKS.</li> <li>Databases deployed with Multi-AZ RDS/Aurora and ClickHouse clusters.</li> </ul>"},{"location":"multi-region/#benefits","title":"Benefits","text":"<ul> <li>Reduced latency for regional users.</li> <li>High SLA (99.99%) through regional redundancy.</li> <li>Compliant with data residency laws.</li> </ul> <p>\u2b05 Back to Home</p>"},{"location":"observability/","title":"Observability Strategy","text":"<p>A comprehensive observability strategy is critical to ensure system reliability, security, and regulatory compliance in a multi-regional architecture like KnowledgeCity.</p>"},{"location":"observability/#monitoring","title":"Monitoring","text":"<p>Monitoring will be implemented using Prometheus and visualized through Grafana dashboards.</p>"},{"location":"observability/#key-metrics","title":"Key Metrics","text":"<ul> <li>Infrastructure: CPU, memory, disk, and network usage per pod/node.</li> <li>Application: Request rates, error rates, latency (RED metrics).</li> <li>Databases: Query performance, replication lag, storage growth.</li> <li>Microservices: Custom business KPIs (e.g., video conversion success/failure rates).</li> </ul>"},{"location":"observability/#logging","title":"Logging","text":"<p>All logs will be centrally collected using the EFK Stack (Elasticsearch, Fluent Bit, Kibana).</p>"},{"location":"observability/#logging-approach","title":"Logging Approach","text":"<ul> <li>Structured Logs: Enforced via log shippers.</li> <li>Centralized Aggregation: Across all regions using secure ingestion pipelines.</li> <li>Searchability: Kibana dashboards for per-service log views and alert investigation.</li> </ul>"},{"location":"observability/#tracing","title":"Tracing","text":"<p>OpenTelemetry will be used to enable distributed tracing across services.</p>"},{"location":"observability/#use-cases","title":"Use Cases","text":"<ul> <li>Track request flow from frontend to backend.</li> <li>Identify bottlenecks in microservices and third-party integrations.</li> <li>Understand user behavior patterns over time.</li> </ul>"},{"location":"observability/#alerting","title":"Alerting","text":"<p>Alertmanager (from Prometheus stack) will be configured with thresholds and anomaly detection rules.</p>"},{"location":"observability/#notification-channels","title":"Notification Channels","text":"<ul> <li>Email</li> <li>Slack</li> </ul>"},{"location":"observability/#integration-with-security","title":"Integration with Security","text":"<p>Observability supports security by: - Detecting DDoS patterns via traffic anomaly monitoring. - Auditing access logs to sensitive data paths. - Tracing breaches across service boundaries.</p> <p>\u2b05 Back to Home</p>"},{"location":"scalability/","title":"Optimization and Scalability","text":"<p>This section describes how the platform is designed to scale efficiently while optimizing for cost and performance.</p>"},{"location":"scalability/#auto-scaling-capabilities","title":"\u2699\ufe0f Auto-Scaling Capabilities","text":"<ul> <li>Elastic Compute:</li> <li>Amazon EKS with Cluster Autoscaler to scale nodes.</li> <li> <p>Kubernetes HPA (Horizontal Pod Autoscaler) based on CPU/memory usage.</p> </li> <li> <p>Storage Scaling:</p> </li> <li>Amazon S3 auto-scales with data volume.</li> <li> <p>RDS/Aurora configured with read replicas and auto-scaling storage.</p> </li> <li> <p>Video Conversion &amp; Analytics:</p> </li> <li>Scaled independently as microservices using KEDA (Kubernetes Event-Driven Autoscaling).</li> <li>Workers scale up/down based on queue length or events.</li> </ul>"},{"location":"scalability/#regional-expansion","title":"\ud83c\udf0d Regional Expansion","text":"<ul> <li>Infrastructure-as-Code (IaC) using Terraform or Pulumi makes it easy to replicate stacks in new regions.</li> <li>Multi-region Route53 policies (Latency-based routing, GeoDNS) for optimal user redirection.</li> </ul>"},{"location":"scalability/#cost-optimization-strategies","title":"\ud83d\udcb0 Cost Optimization Strategies","text":"<ul> <li>Storage:</li> <li>S3 Intelligent-Tiering for video and course content.</li> <li> <p>Lifecycle policies for archival using S3 Glacier.</p> </li> <li> <p>Compute:</p> </li> <li>Spot Instances for non-critical jobs (e.g., batch analytics).</li> <li> <p>Use of ARM-based Graviton instances where possible for cost/performance balance.</p> </li> <li> <p>Delivery:</p> </li> <li>Global CDN (CloudFront) for caching video and static assets near users.</li> <li>Tiered cache policies and edge-optimized delivery to reduce origin fetches.</li> </ul> <p>\u2b05 Back to Home</p>"},{"location":"security/","title":"Security, Observability, and Compliance","text":"<p>This section outlines how the platform maintains strong security, visibility, and adherence to regulatory requirements.</p>"},{"location":"security/#security-measures","title":"\ud83d\udd10 Security Measures","text":"<ul> <li>Access Control:</li> <li>IAM roles and policies follow the principle of least privilege.</li> <li> <p>Role-based access control (RBAC) across all services.</p> </li> <li> <p>Network Protection:</p> </li> <li>AWS Web Application Firewall (WAF) to filter and block malicious traffic.</li> <li> <p>AWS Shield for DDoS protection.</p> </li> <li> <p>Data Protection:</p> </li> <li>All data is encrypted at rest (S3, RDS, EBS, etc.) and in transit (TLS 1.2+).</li> <li> <p>KMS is used for key management and envelope encryption.</p> </li> <li> <p>Secrets Management:</p> </li> <li>AWS Secrets Manager or HSSashiCorp Vault for securely storing API keys, DB passwords, etc.</li> </ul>"},{"location":"security/#observability","title":"\ud83d\udd0e Observability","text":"<ul> <li>Monitoring Tools:</li> <li>Prometheus + Grafana: System and app metrics (CPU, memory, response times).</li> <li>Amazon CloudWatch: Logs, alarms, and service metrics.</li> <li>OpenTelemetry: Distributed tracing and instrumentation.</li> <li> <p>ELK Stack (Elasticsearch, Logstash, Kibana) or EFK (Fluentd): Centralized log management.</p> </li> <li> <p>Key Metrics:</p> </li> <li>Error rates, request latency, system load, and service health.</li> <li>Security logs, access patterns, and failed auth attempts.</li> </ul>"},{"location":"security/#compliance-and-regulation","title":"\ud83d\udcdc Compliance and Regulation","text":"<ul> <li>Data is stored and processed in-region (Saudi Arabia, U.S.) to meet data residency laws.</li> <li>Continuous vulnerability scanning (e.g., AWS Inspector, Snyk).</li> <li>Anomaly detection using machine learning in CloudWatch or external services.</li> <li>Easily adaptable to evolving regulations (e.g., Saudi NCA, U.S. HIPAA/FedRAMP).</li> </ul> <p>\u2b05 Back to Home</p>"},{"location":"video-processing/","title":"Video Processing and Delivery","text":"<p>This microservice handles the upload, conversion, and global delivery of educational videos in various formats and resolutions.</p>"},{"location":"video-processing/#workflow","title":"Workflow","text":"<ol> <li>Upload: Raw video files are uploaded to Amazon S3 using multi-part uploads.</li> <li>Trigger: Upload events trigger the video conversion microservice via S3 event notification or EventBridge.</li> <li>Transcoding: Videos are converted into multiple formats (e.g., MP4, WebM) and resolutions (e.g., 480p, 720p, 1080p) using FFmpeg.</li> <li>Storage: Converted videos are stored in a separate S3 bucket with Intelligent-Tiering for cost efficiency.</li> <li>Global Delivery: Videos are served via Amazon CloudFront, enabling fast streaming globally.</li> </ol>"},{"location":"video-processing/#architecture-highlights","title":"Architecture Highlights","text":"<ul> <li>Scalability: The transcoding service runs on a serverless container model (EKS with HPA).</li> <li>Storage Class Strategy:</li> <li>Frequent Access: Intelligent-Tiering for active courses.</li> <li>Archive: S3 Glacier for deprecated or low-traffic videos.</li> <li>Cross-Region Sync: Critical course content is automatically replicated from the primary region to secondary regions.</li> </ul>"},{"location":"video-processing/#access-path","title":"Access Path","text":"<p>When a user watches a video: - The request is routed via CloudFront (CDN). - Cached version is served from the nearest edge location for low latency. - If not cached, the video is pulled from the origin S3 bucket and then cached.</p>"},{"location":"video-processing/#compliance","title":"Compliance","text":"<p>User data (e.g., profiles, progress, preferences, transactions) is stored in Amazon RDS, replicated and backed up per-region to meet data privacy and compliance requirements.</p> <p>\u2b05 Back to Home</p>"}]}